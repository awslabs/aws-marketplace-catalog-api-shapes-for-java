/*
 * Offer_1_0_Appendix
 *     Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.services.marketplacecatalog.model.offer_1_0.appendix;

import java.util.Objects;
import java.util.Arrays;
import com.amazonaws.services.marketplacecatalog.model.offer_1_0.appendix.CurrencyCode;
import com.amazonaws.services.marketplacecatalog.model.offer_1_0.appendix.UsageBasedPricingTermType;
import com.amazonaws.services.marketplacecatalog.model.offer_1_0.appendix.UsageBasedRateCardItem;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UsageBasedPricingTerm
 */
@JsonPropertyOrder({
  UsageBasedPricingTerm.JSON_PROPERTY_TYPE,
  UsageBasedPricingTerm.JSON_PROPERTY_CURRENCY_CODE,
  UsageBasedPricingTerm.JSON_PROPERTY_RATE_CARDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UsageBasedPricingTerm implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_TYPE = "Type";
  private UsageBasedPricingTermType type;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "CurrencyCode";
  private CurrencyCode currencyCode;

  public static final String JSON_PROPERTY_RATE_CARDS = "RateCards";
  private List<UsageBasedRateCardItem> rateCards = new ArrayList<>();

  public UsageBasedPricingTerm() {
  }

  public UsageBasedPricingTerm type(UsageBasedPricingTermType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UsageBasedPricingTermType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(UsageBasedPricingTermType type) {
    this.type = type;
  }


  public UsageBasedPricingTerm currencyCode(CurrencyCode currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CurrencyCode getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyCode(CurrencyCode currencyCode) {
    this.currencyCode = currencyCode;
  }


  public UsageBasedPricingTerm rateCards(List<UsageBasedRateCardItem> rateCards) {
    
    this.rateCards = rateCards;
    return this;
  }

  public UsageBasedPricingTerm addRateCardsItem(UsageBasedRateCardItem rateCardsItem) {
    if (this.rateCards == null) {
      this.rateCards = new ArrayList<>();
    }
    this.rateCards.add(rateCardsItem);
    return this;
  }

   /**
   * Get rateCards
   * @return rateCards
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RATE_CARDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<UsageBasedRateCardItem> getRateCards() {
    return rateCards;
  }


  @JsonProperty(JSON_PROPERTY_RATE_CARDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRateCards(List<UsageBasedRateCardItem> rateCards) {
    this.rateCards = rateCards;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageBasedPricingTerm usageBasedPricingTerm = (UsageBasedPricingTerm) o;
    return Objects.equals(this.type, usageBasedPricingTerm.type) &&
        Objects.equals(this.currencyCode, usageBasedPricingTerm.currencyCode) &&
        Objects.equals(this.rateCards, usageBasedPricingTerm.rateCards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, currencyCode, rateCards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageBasedPricingTerm {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    rateCards: ").append(toIndentedString(rateCards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


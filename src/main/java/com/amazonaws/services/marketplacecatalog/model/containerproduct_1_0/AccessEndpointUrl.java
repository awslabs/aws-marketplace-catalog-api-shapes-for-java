/*
 * ContainerProduct_1_0
 *     Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.amazonaws.services.marketplacecatalog.model.containerproduct_1_0;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AccessEndpointUrl
 */
@JsonPropertyOrder({
  AccessEndpointUrl.JSON_PROPERTY_PORT,
  AccessEndpointUrl.JSON_PROPERTY_PROTOCOL,
  AccessEndpointUrl.JSON_PROPERTY_RELATIVE_PATH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AccessEndpointUrl implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PORT = "Port";
  private Integer port;

  public static final String JSON_PROPERTY_PROTOCOL = "Protocol";
  private String protocol;

  public static final String JSON_PROPERTY_RELATIVE_PATH = "RelativePath";
  private String relativePath;

  public AccessEndpointUrl() {
  }

  public AccessEndpointUrl port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPort(Integer port) {
    this.port = port;
  }


  public AccessEndpointUrl protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public AccessEndpointUrl relativePath(String relativePath) {
    
    this.relativePath = relativePath;
    return this;
  }

   /**
   * Get relativePath
   * @return relativePath
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELATIVE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelativePath() {
    return relativePath;
  }


  @JsonProperty(JSON_PROPERTY_RELATIVE_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelativePath(String relativePath) {
    this.relativePath = relativePath;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessEndpointUrl accessEndpointUrl = (AccessEndpointUrl) o;
    return Objects.equals(this.port, accessEndpointUrl.port) &&
        Objects.equals(this.protocol, accessEndpointUrl.protocol) &&
        Objects.equals(this.relativePath, accessEndpointUrl.relativePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, protocol, relativePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessEndpointUrl {\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

